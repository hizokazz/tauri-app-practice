/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutSettingsImport } from './routes/_layout.settings'
import { Route as LayoutProfileImport } from './routes/_layout.profile'
import { Route as authLayoutImport } from './routes/(auth)/_layout'
import { Route as authLayoutRegisterImport } from './routes/(auth)/_layout.register'
import { Route as authLayoutLoginImport } from './routes/(auth)/_layout.login'

// Create Virtual Routes

const authImport = createFileRoute('/(auth)')()
const LayoutIndexLazyImport = createFileRoute('/_layout/')()

// Create/Update Routes

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexLazyRoute = LayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./routes/_layout.index.lazy').then((d) => d.Route))

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProfileRoute = LayoutProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)

const authLayoutRegisterRoute = authLayoutRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutLoginRoute = authLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof authRoute
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexLazyImport
      parentRoute: typeof LayoutImport
    }
    '/(auth)/_layout/login': {
      id: '/(auth)/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLayoutLoginImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/register': {
      id: '/(auth)/_layout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authLayoutRegisterImport
      parentRoute: typeof authLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface authLayoutRouteChildren {
  authLayoutLoginRoute: typeof authLayoutLoginRoute
  authLayoutRegisterRoute: typeof authLayoutRegisterRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutLoginRoute: authLayoutLoginRoute,
  authLayoutRegisterRoute: authLayoutRegisterRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutIndexLazyRoute
  '/profile': typeof LayoutProfileRoute
  '/settings': typeof LayoutSettingsRoute
  '/login': typeof authLayoutLoginRoute
  '/register': typeof authLayoutRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexLazyRoute
  '/profile': typeof LayoutProfileRoute
  '/settings': typeof LayoutSettingsRoute
  '/login': typeof authLayoutLoginRoute
  '/register': typeof authLayoutRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRouteWithChildren
  '/_layout/profile': typeof LayoutProfileRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexLazyRoute
  '/(auth)/_layout/login': typeof authLayoutLoginRoute
  '/(auth)/_layout/register': typeof authLayoutRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/profile' | '/settings' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/profile' | '/settings' | '/login' | '/register'
  id:
    | '__root__'
    | '/_layout'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/_layout/profile'
    | '/_layout/settings'
    | '/_layout/'
    | '/(auth)/_layout/login'
    | '/(auth)/_layout/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  authRoute: typeof authRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  authRoute: authRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/(auth)"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/profile",
        "/_layout/settings",
        "/_layout/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_layout"
      ]
    },
    "/(auth)/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_layout/login",
        "/(auth)/_layout/register"
      ]
    },
    "/_layout/profile": {
      "filePath": "_layout.profile.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout.settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout.index.lazy.tsx",
      "parent": "/_layout"
    },
    "/(auth)/_layout/login": {
      "filePath": "(auth)/_layout.login.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/register": {
      "filePath": "(auth)/_layout.register.tsx",
      "parent": "/(auth)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
